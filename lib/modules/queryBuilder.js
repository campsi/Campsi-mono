const uuid = require('uuid');

function filterUserByEmailOrProviderId(provider, profile) {
    let query = {$or: []};
    let identityIdFilter = {};
    identityIdFilter['identities.' + provider.name + '.id'] = profile.identity.id;
    query.$or.push(identityIdFilter);

    if (profile.email) {
        query.$or.push({email: profile.email});
    }

    return query;
}

function genBearerToken(expiration) {
    let exp = new Date();
    exp.setTime(exp.getTime() + (expiration || 10) * 86400000);
    return {
        value: uuid(),
        expiration: exp
    };
}

function genUpdate(provider, profile) {
    let update = {$set: {}};
    update.$set.token = genBearerToken(provider.expiration);
    update.$set['identities.' + provider.name] = profile.identity;
    return update;
}

/**
 *
 * @param provider
 * @param profile
 * @param [update] if the insert is subsequent from the update, we re-use the token generated by the update
 * @return {{email: *|number|string|boolean, displayName, picture: *, identities: {}}}
 */
function genInsert(provider, profile, update) {
    let insert = {
        email: profile.email,
        displayName: profile.displayName,
        picture: profile.picture,
        identities: {}
    };

    insert.identities[provider.name] = profile.identity;

    if (update) {
        insert.token = update.$set.token;
    }

    return insert;
}

module.exports = {
    filterUserByEmailOrProviderId: filterUserByEmailOrProviderId,
    genBearerToken: genBearerToken,
    genUpdate: genUpdate,
    genInsert: genInsert,
};
